
#include <thread>
#include <cstring>
#include <unistd.h>
#include <linux/icmp.h>
#include <linux/icmpv6.h>
#include <linux/ip.h>
#include <sys/socket.h>
#include <arpa/inet.h>
#include <netdb.h>

struct icmp_packet {
    icmphdr header{}; // the icmp v6 header struct for echo is the same
    char msg[56]{};

    explicit icmp_packet(const char *msg) {
        header.type = false ? ICMPV6_ECHO_REQUEST : ICMP_ECHO;
        header.code = 0;
        header.un.echo.id = getpid();
        header.un.echo.sequence = 0;
        strncpy(this->msg, msg, 55);
        checksum();
    }

    uint16_t checksum() {
        this->header.checksum = 0;
        int len = sizeof(*this);
        auto *current = reinterpret_cast<const uint16_t *>(this);
        uint32_t sum = 0;
        while (len > 1) {
            len -= 2;
            sum += *current++;
        }
        if (len)
            sum += *reinterpret_cast<const uint8_t *>(current);
        sum = (sum >> 16u) + (sum & 0xFFFFu);
        sum += sum >> 16u;
        return this->header.checksum = ~sum;
    }
};

char *dns_lookup(const char *hostname, sockaddr_storage &addr) {
    static char ip[INET6_ADDRSTRLEN];
    static addrinfo hint{}, *res = nullptr;
    hint.ai_family = PF_UNSPEC;
    hint.ai_flags = AI_ALL;

    if (getaddrinfo(hostname, nullptr, &hint, &res)) {
        std::cerr << "Invalid address" << std::endl;
        return nullptr;
    }
    memcpy(&addr, res->ai_addr, sizeof(addr));
    inet_ntop(res->ai_family, &(reinterpret_cast<sockaddr_in *>(res->ai_addr)->sin_addr), ip, res->ai_addrlen);
    return ip;
}

void send_request(int sock_fd, const sockaddr_storage &addr, int cnt = 100) {
    icmp_packet packet("echo requests");
    sockaddr_storage r_addr{};
    socklen_t r_len = sizeof(r_addr);

    while (packet.header.un.echo.sequence++ < cnt) {
        using namespace std::chrono_literals;
        std::this_thread::sleep_for(500ms);

        const auto start = std::chrono::high_resolution_clock::now();

        packet.checksum();
        if (sendto(sock_fd, &packet, sizeof(packet), 0,
                   reinterpret_cast<const sockaddr *>(&addr), sizeof(addr)) < 1) {
            std::cerr << "Failed to send packet" << std::endl;
            continue;
        }

        icmp_packet *buffer = nullptr;
        bool failed = false;
        // only care about the reply messages from our ping
        while (buffer == nullptr || buffer->header.type != (ICMP_ECHOREPLY) ||
               buffer->header.un.echo.id != packet.header.un.echo.id) {

#define BUFF_LEN 1024
            char buf[BUFF_LEN];
            memset(buf, '\x00', BUFF_LEN);
            if (recvfrom(sock_fd, buf, BUFF_LEN, 0, reinterpret_cast<sockaddr *>(&r_addr), &r_len) < 0) {
                std::cerr << "Cannot receive from socket" << std::endl;
                failed = true;
                break;
            }

            auto ip = reinterpret_cast<iphdr *>(buf);
            buffer = reinterpret_cast<icmp_packet *>(buf + (false ? 0 : (ip->ihl << 2u)));


            switch (buffer->header.type) {
                case ICMP_TIME_EXCEEDED: {
                    std::cout << "Time Exceeded" << std::endl;
                    failed = true;
                    break;
                }
                case ICMP_DEST_UNREACH: {
                    std::cout << "Destination Unreachable" << std::endl;
                    failed = true;
                    break;
                }
            }
        }
        if (failed) continue;

        const auto end = std::chrono::high_resolution_clock::now();
        std::chrono::duration<double, std::milli> rtt = end - start;
        std::cout << "Received reply: seq=" << packet.header.un.echo.sequence
                  << " rrt=" << rtt.count() << "ms" << std::endl;
    }

}

char *host = "google.com";

int main(int argc, char **argv) {
    sockaddr_storage addr{};
    const char *ip = dns_lookup(host, addr);
    if (ip == nullptr) return 2;

    std::cout << "PING " << host << " (" << ip << ")" << std::endl;

    const int sock_fd = socket(AF_INET,
                               SOCK_RAW, IPPROTO_ICMP);
    if (sock_fd == -1) {
        std::cerr << "Cannot open socket fd\n" << "Consider running with sudo" << std::endl;
        return sock_fd;
    }

    const int cnt = 64;
    send_request(sock_fd, addr, cnt);

    close(sock_fd);

    return 0;
}